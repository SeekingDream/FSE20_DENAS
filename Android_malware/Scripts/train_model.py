from sklearn.model_selection import train_test_split
import os
from utils import *
from scipy import sparse



FEANUM = FEANUMDIC[NowYear]

def PreProcess(year = NowYear):
    filename = "rawdata\\" + str(year) + "\\feature_set.txt"
    f = open(filename, "r")
    datas = f.readlines()
    newdatas = []
    # maxIndex = -1
    for data in datas:
        newdatas.append(np.int32(data.split(',')))
    #     maxIndex = np.max([maxIndex, np.max(np.int32(data.split(',')))])
    datalen = len(newdatas)

    x = np.zeros([datalen, FEANUM], dtype = np.bool)
    y = np.zeros([datalen])
    for i in range(datalen):
        data = newdatas[i]
        y[i] = data[0]
        for j in range(1, len(data)):
            x[i][data[j]] = 1

    if os.path.exists("data\\" + str(year)) == False:
        os.mkdir("data\\" + str(year))
    np.save("data\\" + str(year) + "\\X", x)
    np.save("data\\" + str(year) + "\\y", y)
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3)

    f = open("data\\" + str(year) + "\\train.pkl", "wb")
    pickle.dump([x_train, y_train], f)
    f.close()
    f = open("data\\" + str(year) + "\\test.pkl", "wb")
    pickle.dump([x_test, y_test], f)
    f.close()




def createModel():
        model = keras.Sequential()

        model.add(Dense(50))
        model.add(Activation('relu'))
        model.add(Dropout(0.2))

        model.add(Dense(50))
        model.add(Activation('relu'))
        model.add(Dropout(0.2))

        model.add(Dense(1, activation='sigmoid'))

        model.compile(loss=keras.losses.binary_crossentropy,
                      optimizer=keras.optimizers.Adadelta(),
                      metrics=['accuracy'])

        return model


def TrainModel(year = NowYear):

    x, y = ReadData(year = year)
    model = createModel()
    model.fit(x, y, batch_size=64, validation_split=0.0, epochs=5, )
    if os.path.exists("model\\" + str(year)) == False:
        os.mkdir("model\\" + str(year))
    model.save("model\\" + str(year) + "\\MLP_model.h5")
    print("finish train model")


def TestModel(year = NowYear):
    x, y = ReadData(year=year, IsTrain= False)
    model = load_model("model\\" + str(year) + "\\MLP_model.h5")

    pred_y = (model.predict(x, batch_size = 5000)> 0.5).reshape([np.size(y)])

    Y_Y = np.sum((pred_y == 1) * (y == 1) )
    Y_N = np.sum((pred_y == 1) * (y == 0) )
    N_N = np.sum((pred_y == 0) * (y == 0))
    N_Y = np.sum((pred_y == 0) * (y == 1))


    print("P", Y_Y/(Y_Y + N_Y))
    print("R", Y_Y/(Y_Y + Y_N))
    print("A", (Y_Y + N_N) / len(y))



def CombineData(is_train = True):
    X = np.zeros([1, FEANUM], dtype = np.bool)
    Y = np.zeros([1,1])

    for i in range(2011, 2019):
        x, y = ReadData(year= i, IsTrain= is_train)
        y = y.reshape([-1, 1])

        X = np.concatenate((X, x), axis= 0)
        Y = np.concatenate((Y, y), axis= 0)
        print(i)

    X = X[1 : len(X)]
    Y = Y[1 : len(Y)]

    if os.path.exists("data\\" + str(2019)) == False:
        os.mkdir("data\\" + str(2019))
    if is_train == True:
        np.save("data\\2019\\x_train", X)
        np.save("data\\2019\\y_train", Y)
    else:
        np.save("data\\2019\\x_test", X)
        np.save("data\\2019\\y_test", Y)


# PreProcess(year = 2018)
# CombineData(is_train=True)
# CombineData(is_train=False)
TrainModel(year = 2019)
TestModel(year = 2019)




