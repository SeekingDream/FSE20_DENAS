from Android_malware.Scripts.utils import *
import numpy as np
import pickle as pickle
import datetime
import queue
import keras.backend as K


VECSIZE = [0]
FEANUM = FEANUMDIC[NowYear]


def saveRuleTxt(fname, rule):
    f = open("../RuleSet/" + fname, "a")
    for val in list(rule):
        f.write(str(val))
        f.write(" ")
    f.write("\n")
    f.close()


def generateNewpt(NowNode, puppetModel, model, mean_vec):
    activationState = calAcStateFromRule(NowNode.rule, model)
    contributionVec = calContributionVec(puppetModel, activationState)
    oldcontributionVec = contributionVec.copy()

    for pt in NowNode.rule:
        contributionVec[int(pt / 2)] = 0

    NewNodeList = []

    global VECSIZE
    while len(NowNode.dataset) >= np.max(VECSIZE):
        NewNode = None
        predy = 0
        while NewNode == None:
            newpt = np.argmax(np.abs(contributionVec))
            if contributionVec[newpt] > 0:
                newpt = newpt * 2 + 1
            else:
                newpt = newpt * 2
            pos = int(newpt / 2)
            val = newpt % BIT
            NewNode = NowNode.SplitNode(newpt)
            if NewNode != None:
                predy = calPredy(oldcontributionVec, NewNode.rule, puppetModel, mean_vec)
            contributionVec[pos] = 0
        NewNode.SetPredy(predy)
        NewNodeList.append(NewNode)
        VECSIZE.append(len(NewNode.dataset))
    VECSIZE.append(len(NowNode.dataset))
    return NewNodeList, NowNode


def completeSingleNode(NowNode, puppetModel, model, mean_vec):
    activationState = calAcStateFromRule(NowNode.rule, model)
    contributionVec = calContributionVec(puppetModel, activationState)
    for pt in NowNode.rule:
        contributionVec[int(pt / BIT)] = 0

    while len(NowNode.rule) <= TerminationLength and NowNode.predy <= 0:
        newpt = np.argmax(np.abs(contributionVec))
        if contributionVec[newpt] > 0:
            newpt = newpt * 2 + 1
        else:
            newpt = newpt * 2
        pos = int(newpt / BIT)
        val = newpt % BIT
        if  NowNode.dataset[0, pos] == val:
            NowNode.rule.append(newpt)
            #predy = calPredy(contributionVec, NowNode.rule, puppetModel, mean_vec)
            #NowNode.SetPredy(predy)
        contributionVec[pos] = 0
    return NowNode


def main(year = NowYear):
    model = loadModel(year = year)
    puppetModel = getPuppetModel("../model/" + str(year) + "/MLP_model.h5")
    x, y = ReadData(year= year)
    mean_vec = np.mean(x, axis = 0)
    pos_x = x[np.where(y > 0)[0]]

    print("total input data number is ", len(x), "total malware is", np.sum(y))
    global  VECSIZE
    VECSIZE.append(len(pos_x))
    SingLeRuleSet = []
    node = RuleStructure(pos_x, [])
    node.SetPredy(-100)
    myque = queue.PriorityQueue()
    myque.put(node)

    RuleSet = []

    while len(RuleSet) < 130:
        #print("=========================================================================")
        #print("NOW there are ", myque.qsize(), "DataSet in the QUEUE")
        #print("=========================================================================")
        st_time = datetime.datetime.now()
        NowNode = myque.get()
        del VECSIZE[np.argmax(VECSIZE)]
        #print("Now the Dataset size is ", len(NowNode.dataset), ", The rule length is", len(NowNode.rule))
        if len(NowNode.dataset) <= 1:
            print("the rest data is the single point")
            break
        if NowNode.decideRule() == True:
            RuleSet.append(NowNode.rule)
            print("*************************************************************************")
            print("Find a rule cover data number is ", len(NowNode.dataset))
        else:
            NewNodeList, NowNode = generateNewpt(NowNode, puppetModel, model, mean_vec)
            for NewNode in NewNodeList:
                if len(NewNode.dataset) >= 1:
                    myque.put(NewNode)
                if len(NewNode.dataset) == 1:
                    SingLeRuleSet.append(NewNode)
            if len(NowNode.dataset) >= 1:
                myque.put(NowNode)
            if len(NowNode.dataset) == 1:
                SingLeRuleSet.append(NowNode)
        ed_time = datetime.datetime.now()
        print(ed_time - st_time)

    # print("Single Rule Number is", len(SingLeRuleSet))
    # for SingleIndex in range(len(SingLeRuleSet)):
    #     SingleNode = SingLeRuleSet[SingleIndex]
    #     if len(SingleNode.dataset) == 1:
    #         Node = completeSingleNode(SingleNode, puppetModel, model, mean_vec)
    #         RuleSet.append(Node.rule)
    #         print("complete ,", SingleIndex, "Single Point")
    #     else:
    #         print("There is an error")
    return RuleSet








if __name__ == '__main__':

    RuleSet = main(year = NowYear)

    NewRuleSet = []
    for rule in RuleSet:
        newrule = []
        for r in rule:
            newrule.append([int(r / BIT), r % BIT])
        NewRuleSet.append(newrule)

    f = open("../RuleSet/" + str(NowYear) + ".pkl", "wb")
    pickle.dump(NewRuleSet, f)
    f.close()
    K.clear_session()